{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Laravel Meilisearch","text":"<p>Welcome to the documentation for this project. This directory contains setup and integration guides for core services that power the application.</p>"},{"location":"#available-service-guides","title":"Available Service Guides","text":"<p>Each guide includes installation, configuration, troubleshooting, and notes.</p> <ul> <li> edis</li> <li> eilisearch</li> <li></li> <li> Supervisor</li> <li></li> </ul>"},{"location":"#how-to-use","title":"How to Use","text":"<ul> <li>Start with Meilisearch \u2192 for full-text search.</li> <li>Configure Laravel Scout \u2192 sync models with Meilisearch.</li> <li>Add Redis \u2192 base dependency for queues, caching, sessions.</li> <li>Setup Supervisor \u2192 keep queue workers/Horizon running in production.</li> <li>Enable Horizon \u2192 manage and monitor Redis queues with a dashboard.</li> </ul> <pre><code>sequenceDiagram\n    autonumber\n    participant M as Meilisearch\n    participant S as Scout\n    participant R as Redis\n    participant SP as Supervisor\n    participant H as Horizon\n\n    %% Search ecosystem first\n    Note over M: 1\ufe0f\u20e3 Start Meilisearch\n    M-&gt;&gt;M: Running service...\n    loop Health Check\n        M-&gt;&gt;M: Checking configuration...\n        M-&gt;&gt;M: Checking errors...\n    end\n\n    Note over S: 2\ufe0f\u20e3 Initialize Scout\n    loop Health Check\n        S-&gt;&gt;M: Check Meilisearch index\n        S-&gt;&gt;M: Check search endpoint\n    end\n    S--&gt;&gt;M: Connected to Meilisearch\n    Note over M,S: Search engine is running\n\n    %% Queue ecosystem next\n    Note over R: 3\ufe0f\u20e3 Start Redis\n    R-&gt;&gt;R: Running service...\n    loop Health Check\n        R-&gt;&gt;R: Checking configuration...\n        R-&gt;&gt;R: Checking errors...\n    end\n\n    Note over SP: 4\ufe0f\u20e3 Start Supervisor\n    SP-&gt;&gt;SP: Running service...\n    loop Health Check\n        SP-&gt;&gt;R: Check Redis connection\n    end\n\n    Note over H: 5\ufe0f\u20e3 Start Horizon\n    H-&gt;&gt;H: Running service...\n    loop Health Check\n        H-&gt;&gt;R: Check Redis queues\n        H-&gt;&gt;SP: Check Supervisor workers\n    end\n    H--&gt;&gt;H: \u2705 Horizon dashboard is running</code></pre>"},{"location":"#notes","title":"Notes","text":"<ul> <li>Each guide is self-contained.</li> <li>Use these docs as both setup reference and troubleshooting handbook.</li> </ul>"},{"location":"services/laravel-horizon/","title":"Laravel horizon","text":""},{"location":"services/laravel-horizon/#laravel-horizon","title":"Laravel Horizon","text":"<p>A step-by-step guide on how to install, configure, and run Laravel Horizon for monitoring and managing Redis queues.</p>"},{"location":"services/laravel-horizon/#table-of-contents","title":"Table of Contents","text":"<ol> <li>Overview</li> <li>Prerequisites</li> <li>Installation</li> <li>Running Horizon</li> <li>Testing Horizon</li> <li>Laravel Integration</li> <li>Verification</li> <li>Troubleshooting</li> <li>Notes</li> </ol>"},{"location":"services/laravel-horizon/#1-overview","title":"1. Overview","text":"<p>Laravel Horizon is a queue management dashboard that provides real-time monitoring of jobs, throughput, and failures. It works on top of Redis and is highly recommended for production applications.</p>"},{"location":"services/laravel-horizon/#2-prerequisites","title":"2. Prerequisites","text":"<ul> <li>Laravel 9+ project installed</li> <li>Redis running and configured</li> <li>Supervisor installed and running (for production)</li> <li>PHP 8.1+ and Composer installed</li> </ul>"},{"location":"services/laravel-horizon/#3-installation","title":"3. Installation","text":""},{"location":"services/laravel-horizon/#1-require-horizon-package","title":"1. Require Horizon package","text":"<pre><code>composer require laravel/horizon\n</code></pre>"},{"location":"services/laravel-horizon/#2-publish-configuration-assets","title":"2. Publish configuration &amp; assets","text":"<pre><code>php artisan horizon:install\nphp artisan vendor:publish --provider=\"Laravel\\Horizon\\HorizonServiceProvider\"\n</code></pre> <p>This creates <code>config/horizon.php</code>.</p>"},{"location":"services/laravel-horizon/#3-migrate-database-if-not-yet","title":"3. Migrate database (if not yet)","text":"<pre><code>php artisan migrate\n</code></pre>"},{"location":"services/laravel-horizon/#4-running-horizon","title":"4. Running Horizon","text":""},{"location":"services/laravel-horizon/#1-start-horizon-dev","title":"1. Start Horizon (dev)","text":"<pre><code>php artisan horizon\n</code></pre> <p>Horizon will start managing your Redis queues.</p>"},{"location":"services/laravel-horizon/#2-run-horizon-via-supervisor-production","title":"2. Run Horizon via Supervisor (production)","text":"<p>Create a Supervisor config file:</p> <pre><code>sudo nano /etc/supervisor/conf.d/horizon.conf\n</code></pre> <p>Add the following:</p> <pre><code>[program:horizon]\nprocess_name=%(program_name)s\ncommand=php /var/www/laravel-app/artisan horizon\nautostart=true\nautorestart=true\nstopasgroup=true\nkillasgroup=true\nuser=www-data\nredirect_stderr=true\nstdout_logfile=/var/www/laravel-app/storage/logs/horizon.log\n</code></pre> <p>Reload Supervisor:</p> <pre><code>sudo supervisorctl reread\nsudo supervisorctl update\nsudo supervisorctl start horizon\n</code></pre>"},{"location":"services/laravel-horizon/#5-testing-horizon","title":"5. Testing Horizon","text":""},{"location":"services/laravel-horizon/#1-visit-the-horizon-dashboard-in-your-browser","title":"1. Visit the Horizon dashboard in your browser:","text":"<pre><code>http://your-app.test/horizon\n</code></pre>"},{"location":"services/laravel-horizon/#2-dispatch-a-job","title":"2. Dispatch a job:","text":"<pre><code>php artisan tinker\n&gt;&gt;&gt; dispatch(new App\\Jobs\\ExampleJob());\n</code></pre>"},{"location":"services/laravel-horizon/#3-check-horizon-dashboard-jobs-should-appear-in-the-processed-list","title":"3. Check Horizon dashboard \u2192 Jobs should appear in the processed list.","text":""},{"location":"services/laravel-horizon/#6-laravel-integration","title":"6. Laravel Integration","text":"<ul> <li>In <code>.env</code>, set Redis as the queue driver:</li> </ul> <pre><code>QUEUE_CONNECTION=redis\n</code></pre> <ul> <li>Horizon automatically replaces <code>queue:work redis</code>.</li> <li>You can define workload balancing, tags, and retry strategies in <code>config/horizon.php</code>.</li> </ul>"},{"location":"services/laravel-horizon/#7-verification","title":"7. Verification","text":"<ul> <li>Run Horizon locally and confirm jobs are processed.</li> <li>Ensure Supervisor keeps Horizon running in production:</li> </ul> <pre><code>sudo supervisorctl status horizon\n</code></pre> <p>Expected output:</p> <pre><code>horizon   RUNNING   pid 12345, uptime 0:03:45\n</code></pre>"},{"location":"services/laravel-horizon/#8-troubleshooting","title":"8. Troubleshooting","text":"<ul> <li>Horizon dashboard not loading</li> </ul> <p>\u2192 Check Laravel logs (<code>storage/logs/laravel.log</code>).   \u2192 Ensure you ran <code>php artisan horizon:install</code>.</p> <ul> <li>Jobs not processing</li> </ul> <p>\u2192 Verify Redis is running.   \u2192 Ensure Supervisor is managing Horizon in production.</p> <ul> <li>Changes in config/horizon.php not applied</li> </ul> <p>\u2192 Run <code>php artisan horizon:terminate</code> to restart Horizon.</p> <ul> <li>Supervisor config not working   \u2192 Ensure correct <code>user</code> is set (<code>www-data</code> for Ubuntu, <code>apache/nginx</code> for AlmaLinux).   \u2192 Run:   <pre><code>sudo supervisorctl reread\nsudo supervisorctl update\n</code></pre></li> </ul>"},{"location":"services/laravel-horizon/#9-notes","title":"9. Notes","text":"<ul> <li>Horizon provides a real-time dashboard \u2192 Useful for debugging stuck jobs.</li> <li>Always secure <code>/horizon</code> with middleware in production (e.g., auth or admin guard).</li> <li>Horizon replaces <code>queue:work</code> \u2192 Do not run both at the same time.</li> <li>Use <code>php artisan horizon:terminate</code> instead of <code>restart</code> during deployments.</li> <li>For large apps, define supervisors in <code>config/horizon.php</code> with workload distribution.</li> </ul>"},{"location":"services/laravel-scout/","title":"Laravel scout","text":""},{"location":"services/laravel-scout/#laravel-scout","title":"Laravel Scout","text":"<p>This document provides guidelines on how Laravel Scout is implemented and used in this project. Scout is responsible for making Eloquent models searchable by syncing them with Meilisearch and handling queries efficiently.</p>"},{"location":"services/laravel-scout/#table-of-contents","title":"Table of Contents","text":"<ol> <li>Overview</li> <li>Configuration</li> <li>Making Models Searchable</li> <li>Indexing Data</li> <li>Performing Searches</li> <li>Customizing Indexing</li> <li>Indexing Relationships</li> <li>Queues &amp; Redis</li> <li>Troubleshooting</li> <li>Notes</li> </ol>"},{"location":"services/laravel-scout/#1-overview","title":"1. Overview","text":"<p>Laravel Scout is a driver-based full-text search package for Eloquent. In this project:</p> <ul> <li>Search Engine: Meilisearch</li> <li>Queue System: Redis</li> <li>Models Indexed: Searchable models (Ex. SanctionList)</li> </ul>"},{"location":"services/laravel-scout/#2-configuration","title":"2. Configuration","text":""},{"location":"services/laravel-scout/#service-provider","title":"Service Provider","text":"<p>Scout is auto-registered via Laravel 12.</p> <p>Config file: <code>config/scout.php</code></p>"},{"location":"services/laravel-scout/#scout-configuration-on-env","title":"Scout configuration on .env","text":".env configuration<pre><code>SCOUT_DRIVER=meilisearch\nMEILISEARCH_HOST=http://127.0.0.1:7700\nMEILISEARCH_KEY=YOUR_MASTER_KEY\nQUEUE_CONNECTION=redis\n</code></pre>"},{"location":"services/laravel-scout/#3-making-models-searchable","title":"3. Making Models Searchable","text":"<p>To make a model searchable:</p> SanctionList.php (Model)<pre><code>use Laravel\\Scout\\Searchable;\n\nclass SanctionList extends Model\n{\n    use Searchable;\n}\n</code></pre>"},{"location":"services/laravel-scout/#4-indexing-data","title":"4. Indexing Data","text":""},{"location":"services/laravel-scout/#manually-index-existing-records","title":"Manually index existing records:","text":"Terminal<pre><code>php artisan scout:import \"App\\Models\\SanctionList\"\n</code></pre>"},{"location":"services/laravel-scout/#clear-the-index-and-re-import","title":"Clear the index and re-import:","text":"Terminal<pre><code>php artisan scout:flush \"App\\Models\\SanctionList\"\nphp artisan scout:import \"App\\Models\\SanctionList\"\n</code></pre>"},{"location":"services/laravel-scout/#5-performing-searches","title":"5. Performing Searches","text":"<p>In your code:</p> NameScreeningController.php (Controller)<pre><code>$sanctionLists = SanctionList::search('keyword')-&gt;get();\n</code></pre>"},{"location":"services/laravel-scout/#6-customizing-indexing","title":"6. Customizing Indexing","text":"<p>Define what fields should be indexed by overriding <code>toSearchableArray()</code>:</p> SanctionList.php (Model)<pre><code>public function toSearchableArray(): array\n{\n    return [\n        'id' =&gt; $this-&gt;id,\n        'title' =&gt; $this-&gt;title,\n        'content' =&gt; $this-&gt;content,\n    ];\n}\n</code></pre>"},{"location":"services/laravel-scout/#7-indexing-relationships","title":"7. Indexing Relationships","text":"<p>Sometimes you want related data (e.g., tags, categories, author) to be searchable. You can include them in the <code>toSearchableArray()</code> method. Example: Post with Tags and Category</p> SanctionList.php (Model)<pre><code>public function toSearchableArray(): array\n{\n    return [\n        'id' =&gt; $this-&gt;id,\n        'title' =&gt; $this-&gt;title,\n        'content' =&gt; $this-&gt;content,\n        'category' =&gt; $this-&gt;category?-&gt;name,\n        'tags' =&gt; $this-&gt;tags-&gt;pluck('name')-&gt;toArray(),\n    ];\n}\n</code></pre> <p>This way, a search for a tag or category name will return the post.</p> <p>Tip: Always eager load relationships before importing, otherwise Scout may cause N+1 queries.</p> <p>With eager loading:</p> NameScreeningController.php (Controller)<pre><code>SanctionList::with(['category', 'tags'])-&gt;searchable();\n</code></pre>"},{"location":"services/laravel-scout/#8-queues-redis","title":"8. Queues &amp; Redis","text":"<p>Since Scout operations are queued, configure Redis for performance:</p> .env<pre><code>QUEUE_CONNECTION=redis\n</code></pre> <p>Run the worker:</p> Terminal<pre><code>php artisan queue:work\n</code></pre> <p>This ensures indexing jobs are handled in the background.</p>"},{"location":"services/laravel-scout/#9-troubleshooting","title":"9. Troubleshooting","text":"<ol> <li> <p>Models not searchable</p> <ul> <li>Check the trait: Make sure the model uses the <code>Searchable</code> trait.</li> </ul> SanctionList.php (Model)<pre><code>use Laravel\\Scout\\Searchable;\n\nclass SanctionList extends Model\n{\n    use Searchable;\n}\n</code></pre> <ul> <li>Confirm Scout sees it: Run</li> </ul> Terminal<pre><code>php artisan scout:import \"App\\Models\\SanctionList\"\n</code></pre> <p>If nothing gets indexed, your model may not have the trait or the toSearchableArray() is returning empty.</p> </li> </ol> <ol> <li> <p>Index not updating</p> <ul> <li>Queue worker required: Scout pushes updates (create/update/delete) to the queue. If the worker isn\u2019t running, indexes won\u2019t update.</li> </ul> Terminal<pre><code>php artisan queue:work\n</code></pre> <ul> <li>Check queue connection: Ensure .env is set:</li> </ul> .env<pre><code>QUEUE_CONNECTION=redis\n</code></pre> <ul> <li>Verify jobs: Run</li> </ul> Terminal<pre><code>php artisan queue:failed\n</code></pre> <p>to see if jobs are failing silently.</p> </li> </ol> <ol> <li> <p>Invalid API key</p> <ul> <li>Check <code>.env</code> values:</li> </ul> .env<pre><code>MEILISEARCH_HOST=http://127.0.0.1:7700\nMEILISEARCH_KEY=YOUR_MASTER_KEY\n</code></pre> <ul> <li>Test connectivity with curl:</li> </ul> Terminal<pre><code>curl -H \"Authorization: Bearer masterKey\" http://127.0.0.1:7700/health\n</code></pre> <p>You should see:</p> Response<pre><code>{ \"status\": \"available\" }\n</code></pre> <ul> <li>If this fails \u2192 regenerate your key in Meilisearch or use the correct one.</li> </ul> </li> </ol> <ol> <li> <p>Slow searches</p> <ul> <li>Check Redis performance: Make sure Redis is running, since queueing/search sync depends on it.</li> </ul> Terminal<pre><code>redis-cli ping\n</code></pre> <p>You should see:</p> Response<pre><code>PONG\n</code></pre> <ul> <li>Check Meilisearch load: If you index a large dataset, searches might lag.</li> <li>Use smaller batch imports:   Terminal<pre><code>php artisan scout:import --chunk=500\n</code></pre></li> <li>Allocate more memory/CPU to Meilisearch if needed.</li> </ul> </li> </ol> <ol> <li> <p>Missing relationships in index</p> <ul> <li>Problem: Only the model fields are indexed, related data (e.g., tags, categories) is missing.</li> <li>Solution: Update <code>toSearchableArray()</code>:</li> </ul> SanctionList.php (Model)<pre><code>public function toSearchableArray(): array\n{\n    return [\n        'id' =&gt; $this-&gt;id,\n        'title' =&gt; $this-&gt;title,\n        'content' =&gt; $this-&gt;content,\n        'category' =&gt; $this-&gt;category?-&gt;name,\n        'tags' =&gt; $this-&gt;tags-&gt;pluck('name')-&gt;toArray(),\n    ];\n}\n</code></pre> </li> </ol>"},{"location":"services/laravel-scout/#10-notes","title":"10. Notes","text":"<ul> <li>Scout is only a bridge \u2192 It does not perform searches; Meilisearch handles that.</li> <li>Always add the <code>Searchable</code> trait \u2192 Without it, models won\u2019t sync to the index.</li> <li>Eager load relationships before indexing \u2192 Prevents N+1 queries during bulk imports.</li> <li>Keep indexes lightweight \u2192 Only include fields you really need in <code>toSearchableArray()</code>.</li> <li>A queue worker must be running \u2192 Otherwise, create/update/delete events won\u2019t update the index.</li> <li>Check Redis and Meilisearch health first before assuming Scout is the problem.</li> <li>Use <code>scout:flush</code> + <code>scout:import</code> when making major changes to indexed fields.</li> </ul>"},{"location":"services/meilisearch/","title":"Meilisearch","text":""},{"location":"services/meilisearch/#meilisearch","title":"Meilisearch","text":"<p>A step-by-step guide on how to install, configure, and integrate Meilisearch with Laravel.</p>"},{"location":"services/meilisearch/#table-of-contents","title":"Table of Contents","text":"<ol> <li>Overview</li> <li>Prerequisites</li> <li>Installation</li> <li>Creating a Master Key</li> <li>Running Meilisearch</li> <li>API Keys</li> <li>Laravel Integration</li> <li>Verification</li> <li>Running as a Systemd Service (Production)</li> <li>Reverse Proxy with Nginx</li> <li>Troubleshooting</li> <li>Notes</li> </ol>"},{"location":"services/meilisearch/#1-overview","title":"1. Overview","text":"<p>This guide will help developers install Meilisearch, run the service, generate and use API keys, and connect it to a Laravel project for full-text search functionality.</p> <p>By following this guide, you will learn:</p> <ul> <li>How to install Meilisearch in your environment</li> <li>How to run Meilisearch and manage API keys</li> <li>How to configure Laravel to use Meilisearch</li> <li>How to verify everything is working</li> </ul>"},{"location":"services/meilisearch/#2-prerequisites","title":"2. Prerequisites","text":"<p>Before starting, ensure you have the following installed:</p> <ul> <li>Windows(WSL2 for Dev stage) / Linux</li> <li> <p>Laravel 9+ project with Laravel Scout installed</p> <ul> <li>Official Docs</li> <li>Dev Docs</li> </ul> </li> <li> <p>PHP 8.1+</p> </li> <li>Composer installed</li> <li>Node.js (optional, if front-end indexing is needed)</li> </ul>"},{"location":"services/meilisearch/#3-installation","title":"3. Installation","text":"1. Download Meilisearch<pre><code>curl -L https://install.meilisearch.com | sh\n</code></pre> 2. Move meilisearch to a global path<pre><code>sudo mv meilisearch /usr/local/bin/\n</code></pre> 3. Verify Installation<pre><code>meilisearch --version\n</code></pre>"},{"location":"services/meilisearch/#4-creating-a-master-key","title":"4. Creating a Master Key","text":"<p>Meilisearch requires a master key (minimum 16 characters) for authentication. You have two options:</p> Generate Own Key (Recommended)Let Meilisearch Suggest One"},{"location":"services/meilisearch/#generate-own-key","title":"Generate Own Key","text":"<p>You can generate a key in two ways:</p> <ol> <li> <p>Generate a secure random key (recommended for production).     1. Generate a secure random key<pre><code>Run:\nopenssl rand -base64 32\n\nExample output:\nA3hJf0m7t+UOYZqkK/98i1g9M+0zQhN0KmEY7UwhbDA=\n</code></pre></p> </li> <li> <p>Define your own key manually (minimum 16 characters, good for development or testing).</p> 2. Define your own key manually<pre><code>mySuperStrongKey_2025!\n</code></pre> </li> </ol>"},{"location":"services/meilisearch/#meilisearch-suggestion","title":"Meilisearch Suggestion","text":"<p>If you start Meilisearch without specifying a master key:</p> Start Meilisearch<pre><code>./meilisearch\n</code></pre> <p>It will run in development mode and display a randomly generated secure key in the logs, for example:</p> Generated a secured master key<pre><code>&gt;&gt; --master-key _NdU-sc7sDRdOg08yMoldhstrJoqpw94j_7AkCMH7lk &lt;&lt;\n</code></pre> <ol> <li>Copy the generated master key.</li> <li>Stop Meilisearch (<code>CTRL + C</code>).</li> <li>Restart Meilisearch using the copied master key:   Start Meilisearch with master key<pre><code>./meilisearch --master-key \"_NdU-sc7sDRdOg08yMoldhstrJoqpw94j_7AkCMH7lk\"\n</code></pre></li> </ol>"},{"location":"services/meilisearch/#save-the-key-securely-eg-in-your-env","title":"Save the key securely (e.g., in your <code>.env</code>):","text":".env<pre><code>MEILISEARCH_KEY=YOUR_MASTER_KEY\n</code></pre>"},{"location":"services/meilisearch/#5-running-meilisearch","title":"5. Running Meilisearch","text":"Start Meilisearch<pre><code>meilisearch --master-key=\"MASTER_KEY_EXAMPLE\"\n</code></pre> Run in Background (Optional)<pre><code>nohup meilisearch --master-key=\"MASTER_KEY_EXAMPLE\" &gt; meilisearch.log 2&gt;&amp;1 &amp;\n</code></pre>"},{"location":"services/meilisearch/#6-api-keys-for-api-access","title":"6. API Keys (For API Access)","text":"<p>When you start Meilisearch with a master key, it automatically generates API keys for client access. These keys are only needed when you interact with Meilisearch through its API (not when starting the server).</p> <ul> <li>Master Key \u2192 Full access (set via <code>--master-key</code> when running Meilisearch)</li> <li>Default API Keys (created automatically after startup):</li> <li>Default Search API Key \u2192 Restricted access (search-only operations)</li> <li>Default Admin API Key \u2192 Full access (all API operations, same scope as master key but for API use)</li> </ul> <p>You can list and retrieve all keys using:</p> Run<pre><code>curl -H \"Authorization: Bearer YOUR_MASTER_KEY\" http://127.0.0.1:7700/keys\n</code></pre>"},{"location":"services/meilisearch/#7-laravel-integration","title":"7. Laravel Integration","text":"1. Install Laravel Scout<pre><code>composer require laravel/scout\n</code></pre> 2. Install Meilisearch PHP SDK<pre><code>composer require meilisearch/meilisearch-php http-interop/http-factory-guzzle\n</code></pre> 3. Configure config/scout.php<pre><code>'driver' =&gt; env('SCOUT_DRIVER', 'meilisearch'),\n</code></pre> 4. Add to .env<pre><code>SCOUT_DRIVER=meilisearch\nMEILISEARCH_HOST=http://127.0.0.1:7700\nMEILISEARCH_KEY=YOUR_MASTER_KEY\n</code></pre> 5. Use in Laravel Models<pre><code>use Laravel\\Scout\\Searchable;\n\nclass Post extends Model\n{\n    use Searchable;\n}\n</code></pre> 6. Run indexing<pre><code>php artisan scout:import \"App\\Models\\Post\"\n</code></pre> 7. Search in code<pre><code>$posts = Post::search('keyword')-&gt;get();\n</code></pre>"},{"location":"services/meilisearch/#8-verification","title":"8. Verification","text":"<ul> <li>Visit: <code>http://127.0.0.1:7700</code> \u2192 should show Meilisearch landing page</li> <li> <p>Run a test search:</p> <ul> <li>Perform a search using the Meilisearch landing page.</li> <li>Perform a search using the Name Screening feature.</li> </ul> </li> </ul>"},{"location":"services/meilisearch/#9-running-meilisearch-as-a-systemd-service-production","title":"9. Running Meilisearch as a Systemd Service (Production)","text":"<ul> <li>To keep Meilisearch running in the background and auto-start on boot, set it up as a <code>systemd</code> service.</li> </ul> 1. Create Service File<pre><code>sudo nano /etc/systemd/system/meilisearch.service\n</code></pre> <ul> <li>Paste the following content (update paths if needed):</li> </ul> 2. Add Configuration<pre><code>[Unit]\nDescription=Meilisearch\nAfter=network.target\n\n[Service]\nUser=meili\nGroup=meili\nExecStart=/usr/local/bin/meilisearch --master-key=\"MASTER_KEY_EXAMPLE\"\nRestart=always\nLimitNOFILE=65536\n\n[Install]\nWantedBy=multi-user.target\n</code></pre> <p>Replace <code>MASTER_KEY_EXAMPLE</code> with your real master key. For security, consider creating a dedicated user:</p> <pre><code>sudo useradd -r -s /bin/false meili\nsudo chown meili:meili /usr/local/bin/meilisearch\n</code></pre> 3. Reload systemd and Enable Service<pre><code>sudo systemctl daemon-reload\nsudo systemctl enable meilisearch\nsudo systemctl start meilisearch\n</code></pre> 4. Check Status<pre><code>systemctl status meilisearch\n</code></pre> <ul> <li>You should see it active (running).</li> </ul> 5. Check Logs<pre><code>journalctl -u meilisearch -f\n</code></pre>"},{"location":"services/meilisearch/#10-reverse-proxy-with-nginx","title":"10. Reverse Proxy with Nginx","text":"<p>You can run Meilisearch behind Nginx for easier access. The setup differs for local development (WSL2) vs production servers.</p> Development Setup (WSL2 AlmaLinux)Production Setup (AlmaLinux Server)"},{"location":"services/meilisearch/#development-setup","title":"Development Setup","text":"<p>In WSL2, you can use Nginx to proxy Meilisearch to <code>http://localhost</code> or a custom domain via the Windows hosts file. SSL (Let\u2019s Encrypt) is not practical in WSL2 because it requires a public IP.</p> 1. Install Nginx<pre><code>sudo dnf install nginx -y\nsudo systemctl enable nginx   # Works only if systemd enabled\nsudo systemctl start nginx\n</code></pre> 2-a. Create Meilisearch config<pre><code>sudo nano /etc/nginx/conf.d/meilisearch.conf\n</code></pre> 2-b. Meilisearch configuration content<pre><code>server {\n    listen 80;\n    server_name search.local;\n\n    location / {\n        proxy_pass         http://127.0.0.1:7700;\n        proxy_set_header   Host $host;\n        proxy_set_header   X-Real-IP $remote_addr;\n        proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header   X-Forwarded-Proto $scheme;\n    }\n}\n</code></pre> 3-a. Update Windows Hosts File<pre><code>Edit `C:\\Windows\\System32\\drivers\\etc\\hosts` on Windows:\n</code></pre> 3-b. Windows Hosts File content<pre><code>127.0.0.1 meilisearch.dev\n</code></pre> <p>Now you can access Meilisearch at: http://meilisearch.dev</p>"},{"location":"services/meilisearch/#production-setup","title":"Production Setup","text":"<p>On a live server with a public IP and DNS domain, you can secure Meilisearch with HTTPS.</p> 1. Install Nginx<pre><code>sudo dnf install nginx -y\nsudo systemctl enable nginx\nsudo systemctl start nginx\n</code></pre> 2-a. Create Meilisearch config<pre><code>sudo nano /etc/nginx/conf.d/meilisearch.conf\n</code></pre> 2-b. Meilisearch configuration content<pre><code>server {\n    listen 80;\n    server_name meilisearch.domain.com;\n\n    location / {\n        proxy_pass         http://127.0.0.1:7700;\n        proxy_set_header   Host $host;\n        proxy_set_header   X-Real-IP $remote_addr;\n        proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header   X-Forwarded-Proto $scheme;\n    }\n}\n</code></pre> 3. Test and Reload<pre><code>sudo nginx -t\nsudo systemctl reload nginx\n</code></pre> <p>Now available at: http://meilisearch.domain.com</p>"},{"location":"services/meilisearch/#enable-https-lets-encrypt","title":"Enable HTTPS (Let\u2019s Encrypt)","text":"Install Certbot<pre><code>sudo dnf install certbot python3-certbot-nginx -y\n</code></pre> Run Certbot<pre><code>sudo certbot --nginx -d meilisearch.domain.com\n</code></pre> <p>Meilisearch will now be available securely at: https://meilisearch.domain.com</p> <p>Summary</p> <ul> <li>WSL2 (Development) \u2192 Use http://localhost or fake domain via hosts file (no SSL).</li> <li>Production \u2192 Use real domain with Nginx + Let\u2019s Encrypt for HTTPS.</li> </ul>"},{"location":"services/meilisearch/#11-troubleshooting","title":"11. Troubleshooting","text":"<ul> <li>Service not running</li> </ul> Check if Meilisearch is active<pre><code>sudo systemctl status meilisearch\n</code></pre> or (if running manually)<pre><code>ps aux | grep meilisearch\n</code></pre> <ul> <li>Port conflicts</li> </ul> Ensure nothing else is using 7700<pre><code>sudo lsof -i :7700\n</code></pre> <ul> <li>Invalid API key</li> </ul> Confirm .env in Laravel uses the correct YOUR_MASTER_KEY<pre><code>curl -H \"Authorization: Bearer YOUR_MASTER_KEY\" http://127.0.0.1:7700/health\n</code></pre> Expected output<pre><code>{ \"status\": \"available\" }\n</code></pre> <ul> <li> <p>Connection issues \u2192 If Laravel/Scout can\u2019t connect:</p> </li> <li> <p>Verify Meilisearch is listening on <code>127.0.0.1:7700</code>.</p> </li> <li>If using Docker: confirm container is running and port mapped.</li> <li>If using systemd: check firewall settings.</li> </ul> <ul> <li>Diagram</li> </ul> <pre><code>graph LR\n\nA[Start Meilisearch] --&gt; B{Error?};\nB --&gt; |Yes| C[Investigate];\nC --&gt; D[Troubleshoot];\nD --&gt; B;\nB ----&gt; |No| E[Success];</code></pre>"},{"location":"services/meilisearch/#12-notes","title":"12. Notes","text":"<ul> <li>Meilisearch is the actual search engine \u2192 Scout only acts as a bridge.</li> <li>Secure access \u2192 Always use a <code>masterKey</code> and configure API keys for read/write separation.</li> <li>Consider SSL/TLS \u2192 Run Meilisearch behind Nginx or Caddy with HTTPS for production.</li> <li>Monitor resource usage \u2192 Large datasets may require tuning memory/CPU allocation.</li> <li>Backup indexes \u2192 Regularly export data if using Meilisearch in production:</li> </ul> Enables automatic database dumps<pre><code>meilisearch --dump-dir ./backups\n</code></pre>"},{"location":"services/redis/","title":"Redis","text":""},{"location":"services/redis/#redis","title":"Redis","text":"<p>A step-by-step guide on how to install, configure, and connect Redis with Laravel.</p>"},{"location":"services/redis/#table-of-contents","title":"Table of Contents","text":"<ol> <li>Overview</li> <li>Prerequisites</li> <li>Installation</li> <li>Running Redis</li> <li>Testing Connection</li> <li>Laravel Integration</li> <li>Verification</li> <li>Running Redis as a Systemd Service (Production)</li> <li>Troubleshooting</li> <li>Notes</li> </ol>"},{"location":"services/redis/#1-overview","title":"1. Overview","text":"<p>This guide helps developers set up Redis for use in Laravel projects \u2014 mainly for queues and sessions. It covers installation, starting the server, testing the connection, and integrating with Laravel.</p>"},{"location":"services/redis/#2-prerequisites","title":"2. Prerequisites","text":"<ul> <li>WSL2 AlmaLinux (for dev) OR AlmaLinux server (for production)</li> <li>PHP 8.1+</li> <li>Composer installed</li> <li>Laravel 9+</li> <li>Redis PHP extension (<code>php-redis</code>)</li> </ul>"},{"location":"services/redis/#3-installation","title":"3. Installation","text":"Install Redis<pre><code>sudo dnf install redis -y\n</code></pre> Install PHP Redis Extension<pre><code>sudo dnf install php-pecl-redis -y\n</code></pre>"},{"location":"services/redis/#4-running-redis","title":"4. Running Redis","text":"Start Redis (Foreground, Dev)<pre><code>redis-server\n</code></pre> Run with systemctl (if systemd enabled)<pre><code>sudo systemctl start redis\nsudo systemctl enable redis\n</code></pre>"},{"location":"services/redis/#5-testing-connection","title":"5. Testing Connection","text":"A. Use Redis CLI<pre><code>redis-cli ping\n\nExpected response:\nPONG\n</code></pre> Set/Get a Key<pre><code>redis-cli set foo bar\nredis-cli get foo\n</code></pre>"},{"location":"services/redis/#6-laravel-integration","title":"6. Laravel Integration","text":""},{"location":"services/redis/#1-install-laravel-redis-client-phpredis","title":"1. Install Laravel Redis Client (PHPRedis)","text":"<ul> <li>Laravel natively supports phpredis (faster, recommended).</li> <li>Ensure the <code>php-redis</code> extension is installed:</li> </ul> Install PHP Redis Extension<pre><code>sudo dnf install php-pecl-redis -y\n</code></pre>"},{"location":"services/redis/#2-configure-env","title":"2. Configure <code>.env</code>","text":".env<pre><code>SESSION_DRIVER=redis\nQUEUE_CONNECTION=redis\n\nREDIS_HOST=127.0.0.1\nREDIS_PASSWORD=null\nREDIS_PORT=6379\n</code></pre>"},{"location":"services/redis/#3-update-laravel-configuration-optional","title":"3. Update Laravel Configuration (Optional)","text":"<p>Laravel automatically uses phpredis if installed, but you can explicitly set it in config/database.php:</p> config/database.php<pre><code>'redis' =&gt; [\n\n    'client' =&gt; 'phpredis',\n\n    'default' =&gt; [\n        'url' =&gt; env('REDIS_URL'),\n        'host' =&gt; env('REDIS_HOST', '127.0.0.1'),\n        'password' =&gt; env('REDIS_PASSWORD', null),\n        'port' =&gt; env('REDIS_PORT', 6379),\n        'database' =&gt; env('REDIS_DB', 0),\n    ],\n\n],\n</code></pre>"},{"location":"services/redis/#7-verification","title":"7. Verification","text":"Test Laravel queue worker<pre><code>php artisan queue:work redis\n</code></pre>"},{"location":"services/redis/#8-running-redis-as-a-systemd-service-production","title":"8. Running Redis as a Systemd Service (Production)","text":"Start and enable Redis on boot<pre><code>sudo systemctl enable redis\nsudo systemctl start redis\n</code></pre> Check status<pre><code>systemctl status redis\n</code></pre> Check logs<pre><code>journalctl -u redis -f\n</code></pre>"},{"location":"services/redis/#9-troubleshooting","title":"9. Troubleshooting","text":"<ul> <li><code>redis-cli ping</code> returns (error) <code>Could not connect</code>   \u2192 Ensure Redis is running (<code>systemctl status redis</code> or <code>ps aux | grep redis</code>).   \u2192 Check if Redis is bound to <code>127.0.0.1</code> in <code>/etc/redis.conf</code>.</li> </ul> <ul> <li>Port 6379 already in use   \u2192 Another process is occupying the Redis port.</li> </ul> Find it with<pre><code>sudo lsof -i :6379\n</code></pre> <p>\u2192 Kill or stop the conflicting service, then restart Redis.</p> <ul> <li>Laravel queue jobs stuck / not processing   \u2192 Make sure the queue worker is running:</li> </ul> Run queue worker<pre><code>php artisan queue:work redis\n</code></pre> <p>\u2192 Check <code>storage/logs/laravel.log</code> for job errors.</p> <ul> <li>Redis not persisting data   \u2192 Verify persistence settings in <code>/etc/redis.conf</code> (<code>appendonly yes</code> or snapshot settings).</li> </ul> <ul> <li>Authentication errors   \u2192 If <code>requirepass</code> is enabled in <code>redis.conf</code>, set <code>REDIS_PASSWORD</code> in <code>.env</code> and restart Laravel.</li> </ul> <ul> <li>(Local Development) WSL2 connection issues   \u2192 If running in WSL2, ensure you connect to <code>127.0.0.1</code> and Redis is running inside the same WSL distro (not on Windows natively unless exposed).</li> </ul> <ul> <li>Diagram</li> </ul> <pre><code>graph LR\n\nA[Start Redis] --&gt; B{Error?};\nB --&gt; |Yes| C[Investigate];\nC --&gt; D[Troubleshoot];\nD --&gt; B;\nB ----&gt; |No| E[Success];</code></pre>"},{"location":"services/redis/#10-notes","title":"10. Notes","text":"Development (WSL2 - AlmaLinux)Production <ul> <li>You may not have systemd enabled, so run Redis manually with redis-server &amp; or use nohup.</li> <li>Ensure port 6379 is free.</li> </ul> <ul> <li>Always secure Redis (bind to 127.0.0.1 only in /etc/redis.conf).</li> <li>Use a firewall or authentication for remote connections.</li> <li>Monitor with redis-cli info.</li> </ul>"},{"location":"services/supervisor/","title":"Supervisor","text":"<p>A step-by-step guide on how to install, configure, and run Supervisor to manage Laravel queue workers and Horizon in production.</p>"},{"location":"services/supervisor/#table-of-contents","title":"Table of Contents","text":"<ol> <li>Overview</li> <li>Prerequisites</li> <li>Installation</li> <li>Running Supervisor</li> <li>Testing Supervisor</li> <li>Laravel Integration</li> <li>Verification</li> <li>Troubleshooting</li> <li>Notes</li> </ol>"},{"location":"services/supervisor/#1-overview","title":"1. Overview","text":"<p>Supervisor is a process control system that ensures your Laravel queue workers or Horizon keep running in the background. It automatically restarts processes if they fail, making it essential for production queue management.</p>"},{"location":"services/supervisor/#2-prerequisites","title":"2. Prerequisites","text":"<ul> <li>AlmaLinux or Ubuntu server (production environment)</li> <li>Laravel 9+ installed</li> <li>Redis running (as queue backend)</li> <li>PHP 8.1+ and Composer installed</li> <li>Root or sudo access</li> </ul>"},{"location":"services/supervisor/#3-installation","title":"3. Installation","text":""},{"location":"services/supervisor/#on-almalinux-rhel-based","title":"On AlmaLinux (RHEL-based)","text":"<pre><code>sudo dnf install supervisor -y\n</code></pre>"},{"location":"services/supervisor/#on-ubuntudebian","title":"On Ubuntu/Debian","text":"<pre><code>sudo apt install supervisor -y\n</code></pre> <p>Enable and start Supervisor:</p> <pre><code>sudo systemctl enable supervisord --now   # AlmaLinux\nsudo systemctl enable supervisor --now    # Ubuntu\n</code></pre>"},{"location":"services/supervisor/#4-running-supervisor","title":"4. Running Supervisor","text":"<p>Supervisor uses config files stored in:</p> <ul> <li>AlmaLinux/RHEL \u2192 /etc/supervisord.d/</li> <li>Ubuntu/Debian \u2192 /etc/supervisor/conf.d/</li> </ul> <p>Example: Queue Worker Config Create a new config file:</p> <pre><code>sudo nano /etc/supervisor/conf.d/laravel-worker.conf\n</code></pre> <p>Add the following:</p> <pre><code>[program:laravel-worker]\nprocess_name=%(program_name)s_%(process_num)02d\ncommand=php /var/www/laravel-app/artisan queue:work redis --sleep=3 --tries=3 --max-time=3600\nautostart=true\nautorestart=true\nstopasgroup=true\nkillasgroup=true\nuser=www-data\nnumprocs=1\nredirect_stderr=true\nstdout_logfile=/var/www/laravel-app/storage/logs/worker.log\n</code></pre> <p>Save and reload Supervisor:</p> <pre><code>sudo supervisorctl reread\nsudo supervisorctl update\nsudo supervisorctl start laravel-worker:*\n</code></pre>"},{"location":"services/supervisor/#5-testing-supervisor","title":"5. Testing Supervisor","text":"<p>Check status of workers:</p> <pre><code>sudo supervisorctl status\n</code></pre> <p>Expected output:</p> <pre><code>laravel-worker:laravel-worker_00   RUNNING   pid 12345, uptime 0:05:12\n</code></pre> <p>Stop/restart workers:</p> <pre><code>sudo supervisorctl stop laravel-worker:*\nsudo supervisorctl start laravel-worker:*\n</code></pre>"},{"location":"services/supervisor/#6-laravel-integration","title":"6. Laravel Integration","text":"<ul> <li>Ensure <code>.env</code> uses Redis queues:</li> </ul> <pre><code>QUEUE_CONNECTION=redis\n</code></pre> <ul> <li>Supervisor will keep <code>php artisan queue:work redis</code> running.</li> <li>Horizon (if installed later) can also be managed by Supervisor.</li> </ul>"},{"location":"services/supervisor/#7-verification","title":"7. Verification","text":""},{"location":"services/supervisor/#1-dispatch-a-test-job","title":"1. Dispatch a test job:","text":"<pre><code>php artisan tinker\n&gt;&gt;&gt; dispatch(new App\\Jobs\\ExampleJob());\n</code></pre>"},{"location":"services/supervisor/#2-check-if-the-job-is-processed-by-supervisor-workers","title":"2. Check if the job is processed by Supervisor workers:","text":"<pre><code>tail -f storage/logs/worker.log\n</code></pre>"},{"location":"services/supervisor/#8-troubleshooting","title":"8. Troubleshooting","text":"<ul> <li>Supervisor not starting   \u2192 Check logs:   <pre><code>journalctl -u supervisor -f   # Ubuntu\njournalctl -u supervisord -f  # AlmaLinux\n</code></pre></li> <li>Worker not processing jobs   \u2192 Ensure Redis is running.   \u2192 Check Laravel logs: <code>storage/logs/laravel.log</code>.</li> <li>Config changes not applied   \u2192 Run:   <pre><code>sudo supervisorctl reread\nsudo supervisorctl update\n</code></pre></li> <li>Permission errors   \u2192 Ensure <code>user=www-data</code> (Ubuntu) or <code>user=apache/nginx</code> (AlmaLinux) matches your web server/PHP user.</li> </ul>"},{"location":"services/supervisor/#9-notes","title":"9. Notes","text":"<ul> <li>Use multiple workers for high-traffic apps by increasing <code>numprocs</code>.</li> <li>Monitor logs (<code>worker.log</code> and <code>laravel.log</code>) regularly.</li> <li>Horizon (Laravel package) can be used on top of Supervisor for better monitoring.</li> <li>Always restart Supervisor after deployment if configs change.</li> </ul>"}]}